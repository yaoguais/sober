// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kv.proto

/*
Package kvpb is a generated protocol buffer package.

It is generated from these files:
	kv.proto

It has these top-level messages:
	GetRequest
	GetResponse
	WatchRequest
	Event
*/
package kvpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_EventType int32

const (
	Event_PUT    Event_EventType = 0
	Event_DELETE Event_EventType = 1
)

var Event_EventType_name = map[int32]string{
	0: "PUT",
	1: "DELETE",
}
var Event_EventType_value = map[string]int32{
	"PUT":    0,
	"DELETE": 1,
}

func (x Event_EventType) String() string {
	return proto.EnumName(Event_EventType_name, int32(x))
}
func (Event_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type GetRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Root  string `protobuf:"bytes,2,opt,name=root" json:"root,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetRequest) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

type GetResponse struct {
	Kv map[string]string `protobuf:"bytes,1,rep,name=kv" json:"kv,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResponse) GetKv() map[string]string {
	if m != nil {
		return m.Kv
	}
	return nil
}

type WatchRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Root  string `protobuf:"bytes,2,opt,name=root" json:"root,omitempty"`
}

func (m *WatchRequest) Reset()                    { *m = WatchRequest{} }
func (m *WatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()               {}
func (*WatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WatchRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *WatchRequest) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

type Event struct {
	Type Event_EventType `protobuf:"varint,1,opt,name=type,enum=kvpb.Event_EventType" json:"type,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Event) GetType() Event_EventType {
	if m != nil {
		return m.Type
	}
	return Event_PUT
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "kvpb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "kvpb.GetResponse")
	proto.RegisterType((*WatchRequest)(nil), "kvpb.WatchRequest")
	proto.RegisterType((*Event)(nil), "kvpb.Event")
	proto.RegisterEnum("kvpb.Event_EventType", Event_EventType_name, Event_EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KV service

type KVClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (KV_WatchClient, error)
}

type kVClient struct {
	cc *grpc.ClientConn
}

func NewKVClient(cc *grpc.ClientConn) KVClient {
	return &kVClient{cc}
}

func (c *kVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/kvpb.KV/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (KV_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KV_serviceDesc.Streams[0], c.cc, "/kvpb.KV/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &kVWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KV_WatchClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type kVWatchClient struct {
	grpc.ClientStream
}

func (x *kVWatchClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for KV service

type KVServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Watch(*WatchRequest, KV_WatchServer) error
}

func RegisterKVServer(s *grpc.Server, srv KVServer) {
	s.RegisterService(&_KV_serviceDesc, srv)
}

func _KV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvpb.KV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KVServer).Watch(m, &kVWatchServer{stream})
}

type KV_WatchServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type kVWatchServer struct {
	grpc.ServerStream
}

func (x *kVWatchServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _KV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kvpb.KV",
	HandlerType: (*KVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _KV_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _KV_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kv.proto",
}

func init() { proto.RegisterFile("kv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xb3, 0xf9, 0xd3, 0xda, 0x89, 0x48, 0x1c, 0x14, 0x62, 0x4e, 0x61, 0x4f, 0x2d, 0x94,
	0x20, 0x11, 0xa5, 0x78, 0x36, 0xf4, 0x50, 0x0f, 0x12, 0xa2, 0x5e, 0x6d, 0x65, 0x40, 0x58, 0xc9,
	0xc6, 0x64, 0xbb, 0x90, 0x6f, 0x2f, 0xd9, 0x0d, 0x12, 0xf0, 0xd4, 0x4b, 0x98, 0x37, 0x2f, 0xb3,
	0xf3, 0x7b, 0xbb, 0x70, 0x26, 0x74, 0xd6, 0xb4, 0x52, 0x49, 0xf4, 0x85, 0x6e, 0x0e, 0xfc, 0x01,
	0x60, 0x4b, 0xaa, 0xa4, 0x9f, 0x23, 0x75, 0x0a, 0xaf, 0x20, 0x50, 0x52, 0x50, 0x1d, 0xb3, 0x94,
	0x2d, 0x17, 0xa5, 0x15, 0x88, 0xe0, 0xb7, 0x52, 0xaa, 0xd8, 0x35, 0x4d, 0x53, 0x73, 0x09, 0xa1,
	0x99, 0xeb, 0x1a, 0x59, 0x77, 0x84, 0x2b, 0x70, 0x85, 0x8e, 0x59, 0xea, 0x2d, 0xc3, 0xfc, 0x26,
	0x1b, 0x4e, 0xce, 0x26, 0x76, 0xb6, 0xd3, 0x45, 0xad, 0xda, 0xbe, 0x74, 0x85, 0x4e, 0xee, 0x61,
	0x3e, 0x4a, 0x8c, 0xc0, 0x13, 0xd4, 0x8f, 0xcb, 0x86, 0x72, 0x00, 0xd0, 0xfb, 0xef, 0x23, 0x8d,
	0xbb, 0xac, 0x78, 0x74, 0x37, 0x8c, 0x6f, 0xe0, 0xfc, 0x7d, 0xaf, 0x3e, 0xbf, 0x4e, 0x47, 0xad,
	0x20, 0x28, 0x34, 0xd5, 0x0a, 0x57, 0xe0, 0xab, 0xbe, 0x21, 0x33, 0x71, 0x91, 0x5f, 0x5b, 0x4c,
	0x63, 0xd9, 0x6f, 0xd5, 0x37, 0x54, 0x9a, 0x5f, 0x78, 0x0a, 0x8b, 0xbf, 0x16, 0xce, 0xc1, 0x7b,
	0x79, 0xad, 0x22, 0x07, 0x01, 0x66, 0x4f, 0xc5, 0x73, 0x51, 0x15, 0x11, 0xcb, 0x3f, 0xc0, 0xdd,
	0xbd, 0xe1, 0x1a, 0xbc, 0x2d, 0x29, 0x8c, 0x26, 0x91, 0x0d, 0x5e, 0x72, 0xf9, 0xef, 0x12, 0xb8,
	0x83, 0x6b, 0x08, 0x4c, 0x06, 0x44, 0xeb, 0x4e, 0x03, 0x25, 0xe1, 0x84, 0x87, 0x3b, 0xb7, 0xec,
	0x30, 0x33, 0xef, 0x74, 0xf7, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x63, 0x6b, 0xfb, 0xf0, 0xb3, 0x01,
	0x00, 0x00,
}
